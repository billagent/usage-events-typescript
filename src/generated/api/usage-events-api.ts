/* tslint:disable */
/* eslint-disable */
/**
 * Usage Term Matcher Service
 * This  API is to take in usage events and match them to contract terms. Matching is done first on the contract_uuid, then the sku_id, then the the date of the event. If there is not a match a status a 400 will be returned.
 *
 * The version of the OpenAPI document: 0.10.8-alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RpcStatus } from '../models';
// @ts-ignore
import type { V1IntakeUsageEventRequest } from '../models';
// @ts-ignore
import type { V1IntakeUsageEventResponse } from '../models';
/**
 * UsageEventsApi - axios parameter creator
 * @export
 */
export const UsageEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Matches usage events to contract terms and returns event price and matched term metadata.
         * @summary Process a usage event
         * @param {V1IntakeUsageEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usageTermMatcherServiceIntakeUsageEvent: async (body: V1IntakeUsageEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usageTermMatcherServiceIntakeUsageEvent', 'body', body)
            const localVarPath = `/product/usage-intake`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageEventsApi - functional programming interface
 * @export
 */
export const UsageEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Matches usage events to contract terms and returns event price and matched term metadata.
         * @summary Process a usage event
         * @param {V1IntakeUsageEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usageTermMatcherServiceIntakeUsageEvent(body: V1IntakeUsageEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1IntakeUsageEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usageTermMatcherServiceIntakeUsageEvent(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsageEventsApi.usageTermMatcherServiceIntakeUsageEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsageEventsApi - factory interface
 * @export
 */
export const UsageEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageEventsApiFp(configuration)
    return {
        /**
         * Matches usage events to contract terms and returns event price and matched term metadata.
         * @summary Process a usage event
         * @param {V1IntakeUsageEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usageTermMatcherServiceIntakeUsageEvent(body: V1IntakeUsageEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1IntakeUsageEventResponse> {
            return localVarFp.usageTermMatcherServiceIntakeUsageEvent(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageEventsApi - interface
 * @export
 * @interface UsageEventsApi
 */
export interface UsageEventsApiInterface {
    /**
     * Matches usage events to contract terms and returns event price and matched term metadata.
     * @summary Process a usage event
     * @param {V1IntakeUsageEventRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageEventsApiInterface
     */
    usageTermMatcherServiceIntakeUsageEvent(body: V1IntakeUsageEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1IntakeUsageEventResponse>;

}

/**
 * UsageEventsApi - object-oriented interface
 * @export
 * @class UsageEventsApi
 * @extends {BaseAPI}
 */
export class UsageEventsApi extends BaseAPI implements UsageEventsApiInterface {
    /**
     * Matches usage events to contract terms and returns event price and matched term metadata.
     * @summary Process a usage event
     * @param {V1IntakeUsageEventRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageEventsApi
     */
    public usageTermMatcherServiceIntakeUsageEvent(body: V1IntakeUsageEventRequest, options?: RawAxiosRequestConfig) {
        return UsageEventsApiFp(this.configuration).usageTermMatcherServiceIntakeUsageEvent(body, options).then((request) => request(this.axios, this.basePath));
    }
}

